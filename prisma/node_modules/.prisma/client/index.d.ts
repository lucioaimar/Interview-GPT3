
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Interview
 * 
 */
export type Interview = {
  id: number
  createdAt: Date
  updatedAt: Date
  title: string
  questionNumber: number
  userId: number
  frameworkId: number
  seniorityId: number
  prompt: string
  interviewerName: string
  interviewerImage: string
  finalAssesment: string | null
}

/**
 * Model Question
 * 
 */
export type Question = {
  id: number
  createdAt: Date
  updatedAt: Date
  content: string
  answer: string | null
  correct: boolean | null
  interviewerAnswer: string | null
  interviewId: number
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  createdAt: Date
  updatedAt: Date
  email: string
  password: string
  name: string
  avatarImage: string | null
}

/**
 * Model Framework
 * 
 */
export type Framework = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  image: string
}

/**
 * Model Seniority
 * 
 */
export type Seniority = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Interviews
 * const interviews = await prisma.interview.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Interviews
   * const interviews = await prisma.interview.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.interview`: Exposes CRUD operations for the **Interview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interviews
    * const interviews = await prisma.interview.findMany()
    * ```
    */
  get interview(): Prisma.InterviewDelegate<GlobalReject>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.framework`: Exposes CRUD operations for the **Framework** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Frameworks
    * const frameworks = await prisma.framework.findMany()
    * ```
    */
  get framework(): Prisma.FrameworkDelegate<GlobalReject>;

  /**
   * `prisma.seniority`: Exposes CRUD operations for the **Seniority** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seniorities
    * const seniorities = await prisma.seniority.findMany()
    * ```
    */
  get seniority(): Prisma.SeniorityDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Interview: 'Interview',
    Question: 'Question',
    User: 'User',
    Framework: 'Framework',
    Seniority: 'Seniority'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InterviewCountOutputType
   */


  export type InterviewCountOutputType = {
    questions: number
  }

  export type InterviewCountOutputTypeSelect = {
    questions?: boolean
  }

  export type InterviewCountOutputTypeGetPayload<S extends boolean | null | undefined | InterviewCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? InterviewCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (InterviewCountOutputTypeArgs)
    ? InterviewCountOutputType 
    : S extends { select: any } & (InterviewCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof InterviewCountOutputType ? InterviewCountOutputType[P] : never
  } 
      : InterviewCountOutputType




  // Custom InputTypes

  /**
   * InterviewCountOutputType without action
   */
  export type InterviewCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InterviewCountOutputType
     */
    select?: InterviewCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Interview: number
  }

  export type UserCountOutputTypeSelect = {
    Interview?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type FrameworkCountOutputType
   */


  export type FrameworkCountOutputType = {
    Interview: number
  }

  export type FrameworkCountOutputTypeSelect = {
    Interview?: boolean
  }

  export type FrameworkCountOutputTypeGetPayload<S extends boolean | null | undefined | FrameworkCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FrameworkCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FrameworkCountOutputTypeArgs)
    ? FrameworkCountOutputType 
    : S extends { select: any } & (FrameworkCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FrameworkCountOutputType ? FrameworkCountOutputType[P] : never
  } 
      : FrameworkCountOutputType




  // Custom InputTypes

  /**
   * FrameworkCountOutputType without action
   */
  export type FrameworkCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FrameworkCountOutputType
     */
    select?: FrameworkCountOutputTypeSelect | null
  }



  /**
   * Count Type SeniorityCountOutputType
   */


  export type SeniorityCountOutputType = {
    Interview: number
  }

  export type SeniorityCountOutputTypeSelect = {
    Interview?: boolean
  }

  export type SeniorityCountOutputTypeGetPayload<S extends boolean | null | undefined | SeniorityCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SeniorityCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SeniorityCountOutputTypeArgs)
    ? SeniorityCountOutputType 
    : S extends { select: any } & (SeniorityCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SeniorityCountOutputType ? SeniorityCountOutputType[P] : never
  } 
      : SeniorityCountOutputType




  // Custom InputTypes

  /**
   * SeniorityCountOutputType without action
   */
  export type SeniorityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SeniorityCountOutputType
     */
    select?: SeniorityCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Interview
   */


  export type AggregateInterview = {
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  export type InterviewAvgAggregateOutputType = {
    id: number | null
    questionNumber: number | null
    userId: number | null
    frameworkId: number | null
    seniorityId: number | null
  }

  export type InterviewSumAggregateOutputType = {
    id: number | null
    questionNumber: number | null
    userId: number | null
    frameworkId: number | null
    seniorityId: number | null
  }

  export type InterviewMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    questionNumber: number | null
    userId: number | null
    frameworkId: number | null
    seniorityId: number | null
    prompt: string | null
    interviewerName: string | null
    interviewerImage: string | null
    finalAssesment: string | null
  }

  export type InterviewMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    title: string | null
    questionNumber: number | null
    userId: number | null
    frameworkId: number | null
    seniorityId: number | null
    prompt: string | null
    interviewerName: string | null
    interviewerImage: string | null
    finalAssesment: string | null
  }

  export type InterviewCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    title: number
    questionNumber: number
    userId: number
    frameworkId: number
    seniorityId: number
    prompt: number
    interviewerName: number
    interviewerImage: number
    finalAssesment: number
    _all: number
  }


  export type InterviewAvgAggregateInputType = {
    id?: true
    questionNumber?: true
    userId?: true
    frameworkId?: true
    seniorityId?: true
  }

  export type InterviewSumAggregateInputType = {
    id?: true
    questionNumber?: true
    userId?: true
    frameworkId?: true
    seniorityId?: true
  }

  export type InterviewMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    questionNumber?: true
    userId?: true
    frameworkId?: true
    seniorityId?: true
    prompt?: true
    interviewerName?: true
    interviewerImage?: true
    finalAssesment?: true
  }

  export type InterviewMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    questionNumber?: true
    userId?: true
    frameworkId?: true
    seniorityId?: true
    prompt?: true
    interviewerName?: true
    interviewerImage?: true
    finalAssesment?: true
  }

  export type InterviewCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    title?: true
    questionNumber?: true
    userId?: true
    frameworkId?: true
    seniorityId?: true
    prompt?: true
    interviewerName?: true
    interviewerImage?: true
    finalAssesment?: true
    _all?: true
  }

  export type InterviewAggregateArgs = {
    /**
     * Filter which Interview to aggregate.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interviews
    **/
    _count?: true | InterviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewMaxAggregateInputType
  }

  export type GetInterviewAggregateType<T extends InterviewAggregateArgs> = {
        [P in keyof T & keyof AggregateInterview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterview[P]>
      : GetScalarType<T[P], AggregateInterview[P]>
  }




  export type InterviewGroupByArgs = {
    where?: InterviewWhereInput
    orderBy?: Enumerable<InterviewOrderByWithAggregationInput>
    by: InterviewScalarFieldEnum[]
    having?: InterviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewCountAggregateInputType | true
    _avg?: InterviewAvgAggregateInputType
    _sum?: InterviewSumAggregateInputType
    _min?: InterviewMinAggregateInputType
    _max?: InterviewMaxAggregateInputType
  }


  export type InterviewGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    title: string
    questionNumber: number
    userId: number
    frameworkId: number
    seniorityId: number
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment: string | null
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  type GetInterviewGroupByPayload<T extends InterviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<InterviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewGroupByOutputType[P]>
        }
      >
    >


  export type InterviewSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    title?: boolean
    user?: boolean | UserArgs
    framework?: boolean | FrameworkArgs
    seniority?: boolean | SeniorityArgs
    questionNumber?: boolean
    userId?: boolean
    frameworkId?: boolean
    seniorityId?: boolean
    questions?: boolean | Interview$questionsArgs
    prompt?: boolean
    interviewerName?: boolean
    interviewerImage?: boolean
    finalAssesment?: boolean
    _count?: boolean | InterviewCountOutputTypeArgs
  }


  export type InterviewInclude = {
    user?: boolean | UserArgs
    framework?: boolean | FrameworkArgs
    seniority?: boolean | SeniorityArgs
    questions?: boolean | Interview$questionsArgs
    _count?: boolean | InterviewCountOutputTypeArgs
  }

  export type InterviewGetPayload<S extends boolean | null | undefined | InterviewArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Interview :
    S extends undefined ? never :
    S extends { include: any } & (InterviewArgs | InterviewFindManyArgs)
    ? Interview  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'framework' ? FrameworkGetPayload<S['include'][P]> :
        P extends 'seniority' ? SeniorityGetPayload<S['include'][P]> :
        P extends 'questions' ? Array < QuestionGetPayload<S['include'][P]>>  :
        P extends '_count' ? InterviewCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (InterviewArgs | InterviewFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'framework' ? FrameworkGetPayload<S['select'][P]> :
        P extends 'seniority' ? SeniorityGetPayload<S['select'][P]> :
        P extends 'questions' ? Array < QuestionGetPayload<S['select'][P]>>  :
        P extends '_count' ? InterviewCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Interview ? Interview[P] : never
  } 
      : Interview


  type InterviewCountArgs = 
    Omit<InterviewFindManyArgs, 'select' | 'include'> & {
      select?: InterviewCountAggregateInputType | true
    }

  export interface InterviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Interview that matches the filter.
     * @param {InterviewFindUniqueArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InterviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, InterviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Interview'> extends True ? Prisma__InterviewClient<InterviewGetPayload<T>> : Prisma__InterviewClient<InterviewGetPayload<T> | null, null>

    /**
     * Find one Interview that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InterviewFindUniqueOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InterviewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, InterviewFindUniqueOrThrowArgs>
    ): Prisma__InterviewClient<InterviewGetPayload<T>>

    /**
     * Find the first Interview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InterviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, InterviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Interview'> extends True ? Prisma__InterviewClient<InterviewGetPayload<T>> : Prisma__InterviewClient<InterviewGetPayload<T> | null, null>

    /**
     * Find the first Interview that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InterviewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, InterviewFindFirstOrThrowArgs>
    ): Prisma__InterviewClient<InterviewGetPayload<T>>

    /**
     * Find zero or more Interviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interviews
     * const interviews = await prisma.interview.findMany()
     * 
     * // Get first 10 Interviews
     * const interviews = await prisma.interview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewWithIdOnly = await prisma.interview.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InterviewFindManyArgs>(
      args?: SelectSubset<T, InterviewFindManyArgs>
    ): Prisma.PrismaPromise<Array<InterviewGetPayload<T>>>

    /**
     * Create a Interview.
     * @param {InterviewCreateArgs} args - Arguments to create a Interview.
     * @example
     * // Create one Interview
     * const Interview = await prisma.interview.create({
     *   data: {
     *     // ... data to create a Interview
     *   }
     * })
     * 
    **/
    create<T extends InterviewCreateArgs>(
      args: SelectSubset<T, InterviewCreateArgs>
    ): Prisma__InterviewClient<InterviewGetPayload<T>>

    /**
     * Delete a Interview.
     * @param {InterviewDeleteArgs} args - Arguments to delete one Interview.
     * @example
     * // Delete one Interview
     * const Interview = await prisma.interview.delete({
     *   where: {
     *     // ... filter to delete one Interview
     *   }
     * })
     * 
    **/
    delete<T extends InterviewDeleteArgs>(
      args: SelectSubset<T, InterviewDeleteArgs>
    ): Prisma__InterviewClient<InterviewGetPayload<T>>

    /**
     * Update one Interview.
     * @param {InterviewUpdateArgs} args - Arguments to update one Interview.
     * @example
     * // Update one Interview
     * const interview = await prisma.interview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InterviewUpdateArgs>(
      args: SelectSubset<T, InterviewUpdateArgs>
    ): Prisma__InterviewClient<InterviewGetPayload<T>>

    /**
     * Delete zero or more Interviews.
     * @param {InterviewDeleteManyArgs} args - Arguments to filter Interviews to delete.
     * @example
     * // Delete a few Interviews
     * const { count } = await prisma.interview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InterviewDeleteManyArgs>(
      args?: SelectSubset<T, InterviewDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interviews
     * const interview = await prisma.interview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InterviewUpdateManyArgs>(
      args: SelectSubset<T, InterviewUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Interview.
     * @param {InterviewUpsertArgs} args - Arguments to update or create a Interview.
     * @example
     * // Update or create a Interview
     * const interview = await prisma.interview.upsert({
     *   create: {
     *     // ... data to create a Interview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interview we want to update
     *   }
     * })
    **/
    upsert<T extends InterviewUpsertArgs>(
      args: SelectSubset<T, InterviewUpsertArgs>
    ): Prisma__InterviewClient<InterviewGetPayload<T>>

    /**
     * Count the number of Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewCountArgs} args - Arguments to filter Interviews to count.
     * @example
     * // Count the number of Interviews
     * const count = await prisma.interview.count({
     *   where: {
     *     // ... the filter for the Interviews we want to count
     *   }
     * })
    **/
    count<T extends InterviewCountArgs>(
      args?: Subset<T, InterviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewAggregateArgs>(args: Subset<T, InterviewAggregateArgs>): Prisma.PrismaPromise<GetInterviewAggregateType<T>>

    /**
     * Group by Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewGroupByArgs['orderBy'] }
        : { orderBy?: InterviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Interview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__InterviewClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    framework<T extends FrameworkArgs= {}>(args?: Subset<T, FrameworkArgs>): Prisma__FrameworkClient<FrameworkGetPayload<T> | Null>;

    seniority<T extends SeniorityArgs= {}>(args?: Subset<T, SeniorityArgs>): Prisma__SeniorityClient<SeniorityGetPayload<T> | Null>;

    questions<T extends Interview$questionsArgs= {}>(args?: Subset<T, Interview$questionsArgs>): Prisma.PrismaPromise<Array<QuestionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Interview base type for findUnique actions
   */
  export type InterviewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findUnique
   */
  export interface InterviewFindUniqueArgs extends InterviewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Interview findUniqueOrThrow
   */
  export type InterviewFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }


  /**
   * Interview base type for findFirst actions
   */
  export type InterviewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: Enumerable<InterviewScalarFieldEnum>
  }

  /**
   * Interview findFirst
   */
  export interface InterviewFindFirstArgs extends InterviewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Interview findFirstOrThrow
   */
  export type InterviewFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: Enumerable<InterviewScalarFieldEnum>
  }


  /**
   * Interview findMany
   */
  export type InterviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * Filter, which Interviews to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    distinct?: Enumerable<InterviewScalarFieldEnum>
  }


  /**
   * Interview create
   */
  export type InterviewCreateArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * The data needed to create a Interview.
     */
    data: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
  }


  /**
   * Interview update
   */
  export type InterviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * The data needed to update a Interview.
     */
    data: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
    /**
     * Choose, which Interview to update.
     */
    where: InterviewWhereUniqueInput
  }


  /**
   * Interview updateMany
   */
  export type InterviewUpdateManyArgs = {
    /**
     * The data used to update Interviews.
     */
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyInput>
    /**
     * Filter which Interviews to update
     */
    where?: InterviewWhereInput
  }


  /**
   * Interview upsert
   */
  export type InterviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * The filter to search for the Interview to update in case it exists.
     */
    where: InterviewWhereUniqueInput
    /**
     * In case the Interview found by the `where` argument doesn't exist, create a new Interview with this data.
     */
    create: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
    /**
     * In case the Interview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
  }


  /**
   * Interview delete
   */
  export type InterviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    /**
     * Filter which Interview to delete.
     */
    where: InterviewWhereUniqueInput
  }


  /**
   * Interview deleteMany
   */
  export type InterviewDeleteManyArgs = {
    /**
     * Filter which Interviews to delete
     */
    where?: InterviewWhereInput
  }


  /**
   * Interview.questions
   */
  export type Interview$questionsArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    where?: QuestionWhereInput
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Interview without action
   */
  export type InterviewArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
  }



  /**
   * Model Question
   */


  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    interviewId: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    interviewId: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    answer: string | null
    correct: boolean | null
    interviewerAnswer: string | null
    interviewId: number | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    content: string | null
    answer: string | null
    correct: boolean | null
    interviewerAnswer: string | null
    interviewId: number | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    content: number
    answer: number
    correct: number
    interviewerAnswer: number
    interviewId: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    interviewId?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    interviewId?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    answer?: true
    correct?: true
    interviewerAnswer?: true
    interviewId?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    answer?: true
    correct?: true
    interviewerAnswer?: true
    interviewId?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    content?: true
    answer?: true
    correct?: true
    interviewerAnswer?: true
    interviewId?: true
    _all?: true
  }

  export type QuestionAggregateArgs = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs = {
    where?: QuestionWhereInput
    orderBy?: Enumerable<QuestionOrderByWithAggregationInput>
    by: QuestionScalarFieldEnum[]
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }


  export type QuestionGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    content: string
    answer: string | null
    correct: boolean | null
    interviewerAnswer: string | null
    interviewId: number
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean
    answer?: boolean
    correct?: boolean
    interviewerAnswer?: boolean
    interview?: boolean | InterviewArgs
    interviewId?: boolean
  }


  export type QuestionInclude = {
    interview?: boolean | InterviewArgs
  }

  export type QuestionGetPayload<S extends boolean | null | undefined | QuestionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Question :
    S extends undefined ? never :
    S extends { include: any } & (QuestionArgs | QuestionFindManyArgs)
    ? Question  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'interview' ? InterviewGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (QuestionArgs | QuestionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'interview' ? InterviewGetPayload<S['select'][P]> :  P extends keyof Question ? Question[P] : never
  } 
      : Question


  type QuestionCountArgs = 
    Omit<QuestionFindManyArgs, 'select' | 'include'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, QuestionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Question'> extends True ? Prisma__QuestionClient<QuestionGetPayload<T>> : Prisma__QuestionClient<QuestionGetPayload<T> | null, null>

    /**
     * Find one Question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, QuestionFindUniqueOrThrowArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, QuestionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Question'> extends True ? Prisma__QuestionClient<QuestionGetPayload<T>> : Prisma__QuestionClient<QuestionGetPayload<T> | null, null>

    /**
     * Find the first Question that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, QuestionFindFirstOrThrowArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionFindManyArgs>(
      args?: SelectSubset<T, QuestionFindManyArgs>
    ): Prisma.PrismaPromise<Array<QuestionGetPayload<T>>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends QuestionCreateArgs>(
      args: SelectSubset<T, QuestionCreateArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends QuestionDeleteArgs>(
      args: SelectSubset<T, QuestionDeleteArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionUpdateArgs>(
      args: SelectSubset<T, QuestionUpdateArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionDeleteManyArgs>(
      args?: SelectSubset<T, QuestionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionUpdateManyArgs>(
      args: SelectSubset<T, QuestionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionUpsertArgs>(
      args: SelectSubset<T, QuestionUpsertArgs>
    ): Prisma__QuestionClient<QuestionGetPayload<T>>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuestionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    interview<T extends InterviewArgs= {}>(args?: Subset<T, InterviewArgs>): Prisma__InterviewClient<InterviewGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Question base type for findUnique actions
   */
  export type QuestionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUnique
   */
  export interface QuestionFindUniqueArgs extends QuestionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question base type for findFirst actions
   */
  export type QuestionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }

  /**
   * Question findFirst
   */
  export interface QuestionFindFirstArgs extends QuestionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Question findMany
   */
  export type QuestionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: Enumerable<QuestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: Enumerable<QuestionScalarFieldEnum>
  }


  /**
   * Question create
   */
  export type QuestionCreateArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }


  /**
   * Question update
   */
  export type QuestionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }


  /**
   * Question upsert
   */
  export type QuestionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }


  /**
   * Question delete
   */
  export type QuestionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }


  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }


  /**
   * Question without action
   */
  export type QuestionArgs = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    password: string | null
    name: string | null
    avatarImage: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    password: string | null
    name: string | null
    avatarImage: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    password: number
    name: number
    avatarImage: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    avatarImage?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    avatarImage?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    password?: true
    name?: true
    avatarImage?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
    password: string
    name: string
    avatarImage: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    avatarImage?: boolean
    Interview?: boolean | User$InterviewArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    Interview?: boolean | User$InterviewArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Interview' ? Array < InterviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Interview' ? Array < InterviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Interview<T extends User$InterviewArgs= {}>(args?: Subset<T, User$InterviewArgs>): Prisma.PrismaPromise<Array<InterviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Interview
   */
  export type User$InterviewArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    where?: InterviewWhereInput
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<InterviewScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Framework
   */


  export type AggregateFramework = {
    _count: FrameworkCountAggregateOutputType | null
    _avg: FrameworkAvgAggregateOutputType | null
    _sum: FrameworkSumAggregateOutputType | null
    _min: FrameworkMinAggregateOutputType | null
    _max: FrameworkMaxAggregateOutputType | null
  }

  export type FrameworkAvgAggregateOutputType = {
    id: number | null
  }

  export type FrameworkSumAggregateOutputType = {
    id: number | null
  }

  export type FrameworkMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
  }

  export type FrameworkMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    image: string | null
  }

  export type FrameworkCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    image: number
    _all: number
  }


  export type FrameworkAvgAggregateInputType = {
    id?: true
  }

  export type FrameworkSumAggregateInputType = {
    id?: true
  }

  export type FrameworkMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
  }

  export type FrameworkMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
  }

  export type FrameworkCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    image?: true
    _all?: true
  }

  export type FrameworkAggregateArgs = {
    /**
     * Filter which Framework to aggregate.
     */
    where?: FrameworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frameworks to fetch.
     */
    orderBy?: Enumerable<FrameworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrameworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frameworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frameworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Frameworks
    **/
    _count?: true | FrameworkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrameworkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrameworkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrameworkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrameworkMaxAggregateInputType
  }

  export type GetFrameworkAggregateType<T extends FrameworkAggregateArgs> = {
        [P in keyof T & keyof AggregateFramework]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFramework[P]>
      : GetScalarType<T[P], AggregateFramework[P]>
  }




  export type FrameworkGroupByArgs = {
    where?: FrameworkWhereInput
    orderBy?: Enumerable<FrameworkOrderByWithAggregationInput>
    by: FrameworkScalarFieldEnum[]
    having?: FrameworkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrameworkCountAggregateInputType | true
    _avg?: FrameworkAvgAggregateInputType
    _sum?: FrameworkSumAggregateInputType
    _min?: FrameworkMinAggregateInputType
    _max?: FrameworkMaxAggregateInputType
  }


  export type FrameworkGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    image: string
    _count: FrameworkCountAggregateOutputType | null
    _avg: FrameworkAvgAggregateOutputType | null
    _sum: FrameworkSumAggregateOutputType | null
    _min: FrameworkMinAggregateOutputType | null
    _max: FrameworkMaxAggregateOutputType | null
  }

  type GetFrameworkGroupByPayload<T extends FrameworkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FrameworkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrameworkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrameworkGroupByOutputType[P]>
            : GetScalarType<T[P], FrameworkGroupByOutputType[P]>
        }
      >
    >


  export type FrameworkSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    image?: boolean
    Interview?: boolean | Framework$InterviewArgs
    _count?: boolean | FrameworkCountOutputTypeArgs
  }


  export type FrameworkInclude = {
    Interview?: boolean | Framework$InterviewArgs
    _count?: boolean | FrameworkCountOutputTypeArgs
  }

  export type FrameworkGetPayload<S extends boolean | null | undefined | FrameworkArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Framework :
    S extends undefined ? never :
    S extends { include: any } & (FrameworkArgs | FrameworkFindManyArgs)
    ? Framework  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Interview' ? Array < InterviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? FrameworkCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FrameworkArgs | FrameworkFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Interview' ? Array < InterviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? FrameworkCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Framework ? Framework[P] : never
  } 
      : Framework


  type FrameworkCountArgs = 
    Omit<FrameworkFindManyArgs, 'select' | 'include'> & {
      select?: FrameworkCountAggregateInputType | true
    }

  export interface FrameworkDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Framework that matches the filter.
     * @param {FrameworkFindUniqueArgs} args - Arguments to find a Framework
     * @example
     * // Get one Framework
     * const framework = await prisma.framework.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FrameworkFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FrameworkFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Framework'> extends True ? Prisma__FrameworkClient<FrameworkGetPayload<T>> : Prisma__FrameworkClient<FrameworkGetPayload<T> | null, null>

    /**
     * Find one Framework that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FrameworkFindUniqueOrThrowArgs} args - Arguments to find a Framework
     * @example
     * // Get one Framework
     * const framework = await prisma.framework.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FrameworkFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FrameworkFindUniqueOrThrowArgs>
    ): Prisma__FrameworkClient<FrameworkGetPayload<T>>

    /**
     * Find the first Framework that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkFindFirstArgs} args - Arguments to find a Framework
     * @example
     * // Get one Framework
     * const framework = await prisma.framework.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FrameworkFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FrameworkFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Framework'> extends True ? Prisma__FrameworkClient<FrameworkGetPayload<T>> : Prisma__FrameworkClient<FrameworkGetPayload<T> | null, null>

    /**
     * Find the first Framework that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkFindFirstOrThrowArgs} args - Arguments to find a Framework
     * @example
     * // Get one Framework
     * const framework = await prisma.framework.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FrameworkFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FrameworkFindFirstOrThrowArgs>
    ): Prisma__FrameworkClient<FrameworkGetPayload<T>>

    /**
     * Find zero or more Frameworks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Frameworks
     * const frameworks = await prisma.framework.findMany()
     * 
     * // Get first 10 Frameworks
     * const frameworks = await prisma.framework.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frameworkWithIdOnly = await prisma.framework.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FrameworkFindManyArgs>(
      args?: SelectSubset<T, FrameworkFindManyArgs>
    ): Prisma.PrismaPromise<Array<FrameworkGetPayload<T>>>

    /**
     * Create a Framework.
     * @param {FrameworkCreateArgs} args - Arguments to create a Framework.
     * @example
     * // Create one Framework
     * const Framework = await prisma.framework.create({
     *   data: {
     *     // ... data to create a Framework
     *   }
     * })
     * 
    **/
    create<T extends FrameworkCreateArgs>(
      args: SelectSubset<T, FrameworkCreateArgs>
    ): Prisma__FrameworkClient<FrameworkGetPayload<T>>

    /**
     * Delete a Framework.
     * @param {FrameworkDeleteArgs} args - Arguments to delete one Framework.
     * @example
     * // Delete one Framework
     * const Framework = await prisma.framework.delete({
     *   where: {
     *     // ... filter to delete one Framework
     *   }
     * })
     * 
    **/
    delete<T extends FrameworkDeleteArgs>(
      args: SelectSubset<T, FrameworkDeleteArgs>
    ): Prisma__FrameworkClient<FrameworkGetPayload<T>>

    /**
     * Update one Framework.
     * @param {FrameworkUpdateArgs} args - Arguments to update one Framework.
     * @example
     * // Update one Framework
     * const framework = await prisma.framework.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FrameworkUpdateArgs>(
      args: SelectSubset<T, FrameworkUpdateArgs>
    ): Prisma__FrameworkClient<FrameworkGetPayload<T>>

    /**
     * Delete zero or more Frameworks.
     * @param {FrameworkDeleteManyArgs} args - Arguments to filter Frameworks to delete.
     * @example
     * // Delete a few Frameworks
     * const { count } = await prisma.framework.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FrameworkDeleteManyArgs>(
      args?: SelectSubset<T, FrameworkDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Frameworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Frameworks
     * const framework = await prisma.framework.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FrameworkUpdateManyArgs>(
      args: SelectSubset<T, FrameworkUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Framework.
     * @param {FrameworkUpsertArgs} args - Arguments to update or create a Framework.
     * @example
     * // Update or create a Framework
     * const framework = await prisma.framework.upsert({
     *   create: {
     *     // ... data to create a Framework
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Framework we want to update
     *   }
     * })
    **/
    upsert<T extends FrameworkUpsertArgs>(
      args: SelectSubset<T, FrameworkUpsertArgs>
    ): Prisma__FrameworkClient<FrameworkGetPayload<T>>

    /**
     * Count the number of Frameworks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkCountArgs} args - Arguments to filter Frameworks to count.
     * @example
     * // Count the number of Frameworks
     * const count = await prisma.framework.count({
     *   where: {
     *     // ... the filter for the Frameworks we want to count
     *   }
     * })
    **/
    count<T extends FrameworkCountArgs>(
      args?: Subset<T, FrameworkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrameworkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Framework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrameworkAggregateArgs>(args: Subset<T, FrameworkAggregateArgs>): Prisma.PrismaPromise<GetFrameworkAggregateType<T>>

    /**
     * Group by Framework.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrameworkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrameworkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrameworkGroupByArgs['orderBy'] }
        : { orderBy?: FrameworkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrameworkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrameworkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Framework.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FrameworkClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Interview<T extends Framework$InterviewArgs= {}>(args?: Subset<T, Framework$InterviewArgs>): Prisma.PrismaPromise<Array<InterviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Framework base type for findUnique actions
   */
  export type FrameworkFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * Filter, which Framework to fetch.
     */
    where: FrameworkWhereUniqueInput
  }

  /**
   * Framework findUnique
   */
  export interface FrameworkFindUniqueArgs extends FrameworkFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Framework findUniqueOrThrow
   */
  export type FrameworkFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * Filter, which Framework to fetch.
     */
    where: FrameworkWhereUniqueInput
  }


  /**
   * Framework base type for findFirst actions
   */
  export type FrameworkFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * Filter, which Framework to fetch.
     */
    where?: FrameworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frameworks to fetch.
     */
    orderBy?: Enumerable<FrameworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frameworks.
     */
    cursor?: FrameworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frameworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frameworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frameworks.
     */
    distinct?: Enumerable<FrameworkScalarFieldEnum>
  }

  /**
   * Framework findFirst
   */
  export interface FrameworkFindFirstArgs extends FrameworkFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Framework findFirstOrThrow
   */
  export type FrameworkFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * Filter, which Framework to fetch.
     */
    where?: FrameworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frameworks to fetch.
     */
    orderBy?: Enumerable<FrameworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Frameworks.
     */
    cursor?: FrameworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frameworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frameworks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Frameworks.
     */
    distinct?: Enumerable<FrameworkScalarFieldEnum>
  }


  /**
   * Framework findMany
   */
  export type FrameworkFindManyArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * Filter, which Frameworks to fetch.
     */
    where?: FrameworkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Frameworks to fetch.
     */
    orderBy?: Enumerable<FrameworkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Frameworks.
     */
    cursor?: FrameworkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Frameworks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Frameworks.
     */
    skip?: number
    distinct?: Enumerable<FrameworkScalarFieldEnum>
  }


  /**
   * Framework create
   */
  export type FrameworkCreateArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * The data needed to create a Framework.
     */
    data: XOR<FrameworkCreateInput, FrameworkUncheckedCreateInput>
  }


  /**
   * Framework update
   */
  export type FrameworkUpdateArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * The data needed to update a Framework.
     */
    data: XOR<FrameworkUpdateInput, FrameworkUncheckedUpdateInput>
    /**
     * Choose, which Framework to update.
     */
    where: FrameworkWhereUniqueInput
  }


  /**
   * Framework updateMany
   */
  export type FrameworkUpdateManyArgs = {
    /**
     * The data used to update Frameworks.
     */
    data: XOR<FrameworkUpdateManyMutationInput, FrameworkUncheckedUpdateManyInput>
    /**
     * Filter which Frameworks to update
     */
    where?: FrameworkWhereInput
  }


  /**
   * Framework upsert
   */
  export type FrameworkUpsertArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * The filter to search for the Framework to update in case it exists.
     */
    where: FrameworkWhereUniqueInput
    /**
     * In case the Framework found by the `where` argument doesn't exist, create a new Framework with this data.
     */
    create: XOR<FrameworkCreateInput, FrameworkUncheckedCreateInput>
    /**
     * In case the Framework was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrameworkUpdateInput, FrameworkUncheckedUpdateInput>
  }


  /**
   * Framework delete
   */
  export type FrameworkDeleteArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
    /**
     * Filter which Framework to delete.
     */
    where: FrameworkWhereUniqueInput
  }


  /**
   * Framework deleteMany
   */
  export type FrameworkDeleteManyArgs = {
    /**
     * Filter which Frameworks to delete
     */
    where?: FrameworkWhereInput
  }


  /**
   * Framework.Interview
   */
  export type Framework$InterviewArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    where?: InterviewWhereInput
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<InterviewScalarFieldEnum>
  }


  /**
   * Framework without action
   */
  export type FrameworkArgs = {
    /**
     * Select specific fields to fetch from the Framework
     */
    select?: FrameworkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FrameworkInclude | null
  }



  /**
   * Model Seniority
   */


  export type AggregateSeniority = {
    _count: SeniorityCountAggregateOutputType | null
    _avg: SeniorityAvgAggregateOutputType | null
    _sum: SenioritySumAggregateOutputType | null
    _min: SeniorityMinAggregateOutputType | null
    _max: SeniorityMaxAggregateOutputType | null
  }

  export type SeniorityAvgAggregateOutputType = {
    id: number | null
  }

  export type SenioritySumAggregateOutputType = {
    id: number | null
  }

  export type SeniorityMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
  }

  export type SeniorityMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
  }

  export type SeniorityCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    _all: number
  }


  export type SeniorityAvgAggregateInputType = {
    id?: true
  }

  export type SenioritySumAggregateInputType = {
    id?: true
  }

  export type SeniorityMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
  }

  export type SeniorityMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
  }

  export type SeniorityCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    _all?: true
  }

  export type SeniorityAggregateArgs = {
    /**
     * Filter which Seniority to aggregate.
     */
    where?: SeniorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seniorities to fetch.
     */
    orderBy?: Enumerable<SeniorityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeniorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seniorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seniorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seniorities
    **/
    _count?: true | SeniorityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeniorityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SenioritySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeniorityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeniorityMaxAggregateInputType
  }

  export type GetSeniorityAggregateType<T extends SeniorityAggregateArgs> = {
        [P in keyof T & keyof AggregateSeniority]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeniority[P]>
      : GetScalarType<T[P], AggregateSeniority[P]>
  }




  export type SeniorityGroupByArgs = {
    where?: SeniorityWhereInput
    orderBy?: Enumerable<SeniorityOrderByWithAggregationInput>
    by: SeniorityScalarFieldEnum[]
    having?: SeniorityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeniorityCountAggregateInputType | true
    _avg?: SeniorityAvgAggregateInputType
    _sum?: SenioritySumAggregateInputType
    _min?: SeniorityMinAggregateInputType
    _max?: SeniorityMaxAggregateInputType
  }


  export type SeniorityGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    _count: SeniorityCountAggregateOutputType | null
    _avg: SeniorityAvgAggregateOutputType | null
    _sum: SenioritySumAggregateOutputType | null
    _min: SeniorityMinAggregateOutputType | null
    _max: SeniorityMaxAggregateOutputType | null
  }

  type GetSeniorityGroupByPayload<T extends SeniorityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SeniorityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeniorityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeniorityGroupByOutputType[P]>
            : GetScalarType<T[P], SeniorityGroupByOutputType[P]>
        }
      >
    >


  export type SenioritySelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    Interview?: boolean | Seniority$InterviewArgs
    _count?: boolean | SeniorityCountOutputTypeArgs
  }


  export type SeniorityInclude = {
    Interview?: boolean | Seniority$InterviewArgs
    _count?: boolean | SeniorityCountOutputTypeArgs
  }

  export type SeniorityGetPayload<S extends boolean | null | undefined | SeniorityArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Seniority :
    S extends undefined ? never :
    S extends { include: any } & (SeniorityArgs | SeniorityFindManyArgs)
    ? Seniority  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Interview' ? Array < InterviewGetPayload<S['include'][P]>>  :
        P extends '_count' ? SeniorityCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SeniorityArgs | SeniorityFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Interview' ? Array < InterviewGetPayload<S['select'][P]>>  :
        P extends '_count' ? SeniorityCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Seniority ? Seniority[P] : never
  } 
      : Seniority


  type SeniorityCountArgs = 
    Omit<SeniorityFindManyArgs, 'select' | 'include'> & {
      select?: SeniorityCountAggregateInputType | true
    }

  export interface SeniorityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Seniority that matches the filter.
     * @param {SeniorityFindUniqueArgs} args - Arguments to find a Seniority
     * @example
     * // Get one Seniority
     * const seniority = await prisma.seniority.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeniorityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SeniorityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Seniority'> extends True ? Prisma__SeniorityClient<SeniorityGetPayload<T>> : Prisma__SeniorityClient<SeniorityGetPayload<T> | null, null>

    /**
     * Find one Seniority that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeniorityFindUniqueOrThrowArgs} args - Arguments to find a Seniority
     * @example
     * // Get one Seniority
     * const seniority = await prisma.seniority.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeniorityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SeniorityFindUniqueOrThrowArgs>
    ): Prisma__SeniorityClient<SeniorityGetPayload<T>>

    /**
     * Find the first Seniority that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityFindFirstArgs} args - Arguments to find a Seniority
     * @example
     * // Get one Seniority
     * const seniority = await prisma.seniority.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeniorityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SeniorityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Seniority'> extends True ? Prisma__SeniorityClient<SeniorityGetPayload<T>> : Prisma__SeniorityClient<SeniorityGetPayload<T> | null, null>

    /**
     * Find the first Seniority that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityFindFirstOrThrowArgs} args - Arguments to find a Seniority
     * @example
     * // Get one Seniority
     * const seniority = await prisma.seniority.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeniorityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SeniorityFindFirstOrThrowArgs>
    ): Prisma__SeniorityClient<SeniorityGetPayload<T>>

    /**
     * Find zero or more Seniorities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seniorities
     * const seniorities = await prisma.seniority.findMany()
     * 
     * // Get first 10 Seniorities
     * const seniorities = await prisma.seniority.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seniorityWithIdOnly = await prisma.seniority.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeniorityFindManyArgs>(
      args?: SelectSubset<T, SeniorityFindManyArgs>
    ): Prisma.PrismaPromise<Array<SeniorityGetPayload<T>>>

    /**
     * Create a Seniority.
     * @param {SeniorityCreateArgs} args - Arguments to create a Seniority.
     * @example
     * // Create one Seniority
     * const Seniority = await prisma.seniority.create({
     *   data: {
     *     // ... data to create a Seniority
     *   }
     * })
     * 
    **/
    create<T extends SeniorityCreateArgs>(
      args: SelectSubset<T, SeniorityCreateArgs>
    ): Prisma__SeniorityClient<SeniorityGetPayload<T>>

    /**
     * Delete a Seniority.
     * @param {SeniorityDeleteArgs} args - Arguments to delete one Seniority.
     * @example
     * // Delete one Seniority
     * const Seniority = await prisma.seniority.delete({
     *   where: {
     *     // ... filter to delete one Seniority
     *   }
     * })
     * 
    **/
    delete<T extends SeniorityDeleteArgs>(
      args: SelectSubset<T, SeniorityDeleteArgs>
    ): Prisma__SeniorityClient<SeniorityGetPayload<T>>

    /**
     * Update one Seniority.
     * @param {SeniorityUpdateArgs} args - Arguments to update one Seniority.
     * @example
     * // Update one Seniority
     * const seniority = await prisma.seniority.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeniorityUpdateArgs>(
      args: SelectSubset<T, SeniorityUpdateArgs>
    ): Prisma__SeniorityClient<SeniorityGetPayload<T>>

    /**
     * Delete zero or more Seniorities.
     * @param {SeniorityDeleteManyArgs} args - Arguments to filter Seniorities to delete.
     * @example
     * // Delete a few Seniorities
     * const { count } = await prisma.seniority.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeniorityDeleteManyArgs>(
      args?: SelectSubset<T, SeniorityDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seniorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seniorities
     * const seniority = await prisma.seniority.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeniorityUpdateManyArgs>(
      args: SelectSubset<T, SeniorityUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seniority.
     * @param {SeniorityUpsertArgs} args - Arguments to update or create a Seniority.
     * @example
     * // Update or create a Seniority
     * const seniority = await prisma.seniority.upsert({
     *   create: {
     *     // ... data to create a Seniority
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seniority we want to update
     *   }
     * })
    **/
    upsert<T extends SeniorityUpsertArgs>(
      args: SelectSubset<T, SeniorityUpsertArgs>
    ): Prisma__SeniorityClient<SeniorityGetPayload<T>>

    /**
     * Count the number of Seniorities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityCountArgs} args - Arguments to filter Seniorities to count.
     * @example
     * // Count the number of Seniorities
     * const count = await prisma.seniority.count({
     *   where: {
     *     // ... the filter for the Seniorities we want to count
     *   }
     * })
    **/
    count<T extends SeniorityCountArgs>(
      args?: Subset<T, SeniorityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeniorityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seniority.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeniorityAggregateArgs>(args: Subset<T, SeniorityAggregateArgs>): Prisma.PrismaPromise<GetSeniorityAggregateType<T>>

    /**
     * Group by Seniority.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeniorityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeniorityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeniorityGroupByArgs['orderBy'] }
        : { orderBy?: SeniorityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeniorityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeniorityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Seniority.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SeniorityClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Interview<T extends Seniority$InterviewArgs= {}>(args?: Subset<T, Seniority$InterviewArgs>): Prisma.PrismaPromise<Array<InterviewGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Seniority base type for findUnique actions
   */
  export type SeniorityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * Filter, which Seniority to fetch.
     */
    where: SeniorityWhereUniqueInput
  }

  /**
   * Seniority findUnique
   */
  export interface SeniorityFindUniqueArgs extends SeniorityFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Seniority findUniqueOrThrow
   */
  export type SeniorityFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * Filter, which Seniority to fetch.
     */
    where: SeniorityWhereUniqueInput
  }


  /**
   * Seniority base type for findFirst actions
   */
  export type SeniorityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * Filter, which Seniority to fetch.
     */
    where?: SeniorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seniorities to fetch.
     */
    orderBy?: Enumerable<SeniorityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seniorities.
     */
    cursor?: SeniorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seniorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seniorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seniorities.
     */
    distinct?: Enumerable<SeniorityScalarFieldEnum>
  }

  /**
   * Seniority findFirst
   */
  export interface SeniorityFindFirstArgs extends SeniorityFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Seniority findFirstOrThrow
   */
  export type SeniorityFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * Filter, which Seniority to fetch.
     */
    where?: SeniorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seniorities to fetch.
     */
    orderBy?: Enumerable<SeniorityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seniorities.
     */
    cursor?: SeniorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seniorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seniorities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seniorities.
     */
    distinct?: Enumerable<SeniorityScalarFieldEnum>
  }


  /**
   * Seniority findMany
   */
  export type SeniorityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * Filter, which Seniorities to fetch.
     */
    where?: SeniorityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seniorities to fetch.
     */
    orderBy?: Enumerable<SeniorityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seniorities.
     */
    cursor?: SeniorityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seniorities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seniorities.
     */
    skip?: number
    distinct?: Enumerable<SeniorityScalarFieldEnum>
  }


  /**
   * Seniority create
   */
  export type SeniorityCreateArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * The data needed to create a Seniority.
     */
    data: XOR<SeniorityCreateInput, SeniorityUncheckedCreateInput>
  }


  /**
   * Seniority update
   */
  export type SeniorityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * The data needed to update a Seniority.
     */
    data: XOR<SeniorityUpdateInput, SeniorityUncheckedUpdateInput>
    /**
     * Choose, which Seniority to update.
     */
    where: SeniorityWhereUniqueInput
  }


  /**
   * Seniority updateMany
   */
  export type SeniorityUpdateManyArgs = {
    /**
     * The data used to update Seniorities.
     */
    data: XOR<SeniorityUpdateManyMutationInput, SeniorityUncheckedUpdateManyInput>
    /**
     * Filter which Seniorities to update
     */
    where?: SeniorityWhereInput
  }


  /**
   * Seniority upsert
   */
  export type SeniorityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * The filter to search for the Seniority to update in case it exists.
     */
    where: SeniorityWhereUniqueInput
    /**
     * In case the Seniority found by the `where` argument doesn't exist, create a new Seniority with this data.
     */
    create: XOR<SeniorityCreateInput, SeniorityUncheckedCreateInput>
    /**
     * In case the Seniority was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeniorityUpdateInput, SeniorityUncheckedUpdateInput>
  }


  /**
   * Seniority delete
   */
  export type SeniorityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
    /**
     * Filter which Seniority to delete.
     */
    where: SeniorityWhereUniqueInput
  }


  /**
   * Seniority deleteMany
   */
  export type SeniorityDeleteManyArgs = {
    /**
     * Filter which Seniorities to delete
     */
    where?: SeniorityWhereInput
  }


  /**
   * Seniority.Interview
   */
  export type Seniority$InterviewArgs = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InterviewInclude | null
    where?: InterviewWhereInput
    orderBy?: Enumerable<InterviewOrderByWithRelationInput>
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<InterviewScalarFieldEnum>
  }


  /**
   * Seniority without action
   */
  export type SeniorityArgs = {
    /**
     * Select specific fields to fetch from the Seniority
     */
    select?: SenioritySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SeniorityInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const FrameworkScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    image: 'image'
  };

  export type FrameworkScalarFieldEnum = (typeof FrameworkScalarFieldEnum)[keyof typeof FrameworkScalarFieldEnum]


  export const InterviewScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    title: 'title',
    questionNumber: 'questionNumber',
    userId: 'userId',
    frameworkId: 'frameworkId',
    seniorityId: 'seniorityId',
    prompt: 'prompt',
    interviewerName: 'interviewerName',
    interviewerImage: 'interviewerImage',
    finalAssesment: 'finalAssesment'
  };

  export type InterviewScalarFieldEnum = (typeof InterviewScalarFieldEnum)[keyof typeof InterviewScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    content: 'content',
    answer: 'answer',
    correct: 'correct',
    interviewerAnswer: 'interviewerAnswer',
    interviewId: 'interviewId'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const SeniorityScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name'
  };

  export type SeniorityScalarFieldEnum = (typeof SeniorityScalarFieldEnum)[keyof typeof SeniorityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    password: 'password',
    name: 'name',
    avatarImage: 'avatarImage'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type InterviewWhereInput = {
    AND?: Enumerable<InterviewWhereInput>
    OR?: Enumerable<InterviewWhereInput>
    NOT?: Enumerable<InterviewWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    framework?: XOR<FrameworkRelationFilter, FrameworkWhereInput>
    seniority?: XOR<SeniorityRelationFilter, SeniorityWhereInput>
    questionNumber?: IntFilter | number
    userId?: IntFilter | number
    frameworkId?: IntFilter | number
    seniorityId?: IntFilter | number
    questions?: QuestionListRelationFilter
    prompt?: StringFilter | string
    interviewerName?: StringFilter | string
    interviewerImage?: StringFilter | string
    finalAssesment?: StringNullableFilter | string | null
  }

  export type InterviewOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    user?: UserOrderByWithRelationInput
    framework?: FrameworkOrderByWithRelationInput
    seniority?: SeniorityOrderByWithRelationInput
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
    questions?: QuestionOrderByRelationAggregateInput
    prompt?: SortOrder
    interviewerName?: SortOrder
    interviewerImage?: SortOrder
    finalAssesment?: SortOrder
  }

  export type InterviewWhereUniqueInput = {
    id?: number
  }

  export type InterviewOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
    prompt?: SortOrder
    interviewerName?: SortOrder
    interviewerImage?: SortOrder
    finalAssesment?: SortOrder
    _count?: InterviewCountOrderByAggregateInput
    _avg?: InterviewAvgOrderByAggregateInput
    _max?: InterviewMaxOrderByAggregateInput
    _min?: InterviewMinOrderByAggregateInput
    _sum?: InterviewSumOrderByAggregateInput
  }

  export type InterviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<InterviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<InterviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<InterviewScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    title?: StringWithAggregatesFilter | string
    questionNumber?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    frameworkId?: IntWithAggregatesFilter | number
    seniorityId?: IntWithAggregatesFilter | number
    prompt?: StringWithAggregatesFilter | string
    interviewerName?: StringWithAggregatesFilter | string
    interviewerImage?: StringWithAggregatesFilter | string
    finalAssesment?: StringNullableWithAggregatesFilter | string | null
  }

  export type QuestionWhereInput = {
    AND?: Enumerable<QuestionWhereInput>
    OR?: Enumerable<QuestionWhereInput>
    NOT?: Enumerable<QuestionWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    content?: StringFilter | string
    answer?: StringNullableFilter | string | null
    correct?: BoolNullableFilter | boolean | null
    interviewerAnswer?: StringNullableFilter | string | null
    interview?: XOR<InterviewRelationFilter, InterviewWhereInput>
    interviewId?: IntFilter | number
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    answer?: SortOrder
    correct?: SortOrder
    interviewerAnswer?: SortOrder
    interview?: InterviewOrderByWithRelationInput
    interviewId?: SortOrder
  }

  export type QuestionWhereUniqueInput = {
    id?: number
  }

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    answer?: SortOrder
    correct?: SortOrder
    interviewerAnswer?: SortOrder
    interviewId?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    OR?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<QuestionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    content?: StringWithAggregatesFilter | string
    answer?: StringNullableWithAggregatesFilter | string | null
    correct?: BoolNullableWithAggregatesFilter | boolean | null
    interviewerAnswer?: StringNullableWithAggregatesFilter | string | null
    interviewId?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    avatarImage?: StringNullableFilter | string | null
    Interview?: InterviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatarImage?: SortOrder
    Interview?: InterviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatarImage?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    avatarImage?: StringNullableWithAggregatesFilter | string | null
  }

  export type FrameworkWhereInput = {
    AND?: Enumerable<FrameworkWhereInput>
    OR?: Enumerable<FrameworkWhereInput>
    NOT?: Enumerable<FrameworkWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    image?: StringFilter | string
    Interview?: InterviewListRelationFilter
  }

  export type FrameworkOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    Interview?: InterviewOrderByRelationAggregateInput
  }

  export type FrameworkWhereUniqueInput = {
    id?: number
  }

  export type FrameworkOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
    _count?: FrameworkCountOrderByAggregateInput
    _avg?: FrameworkAvgOrderByAggregateInput
    _max?: FrameworkMaxOrderByAggregateInput
    _min?: FrameworkMinOrderByAggregateInput
    _sum?: FrameworkSumOrderByAggregateInput
  }

  export type FrameworkScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FrameworkScalarWhereWithAggregatesInput>
    OR?: Enumerable<FrameworkScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FrameworkScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
  }

  export type SeniorityWhereInput = {
    AND?: Enumerable<SeniorityWhereInput>
    OR?: Enumerable<SeniorityWhereInput>
    NOT?: Enumerable<SeniorityWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    Interview?: InterviewListRelationFilter
  }

  export type SeniorityOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    Interview?: InterviewOrderByRelationAggregateInput
  }

  export type SeniorityWhereUniqueInput = {
    id?: number
  }

  export type SeniorityOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    _count?: SeniorityCountOrderByAggregateInput
    _avg?: SeniorityAvgOrderByAggregateInput
    _max?: SeniorityMaxOrderByAggregateInput
    _min?: SeniorityMinOrderByAggregateInput
    _sum?: SenioritySumOrderByAggregateInput
  }

  export type SeniorityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SeniorityScalarWhereWithAggregatesInput>
    OR?: Enumerable<SeniorityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SeniorityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
  }

  export type InterviewCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    user: UserCreateNestedOneWithoutInterviewInput
    framework: FrameworkCreateNestedOneWithoutInterviewInput
    seniority: SeniorityCreateNestedOneWithoutInterviewInput
    questionNumber: number
    questions?: QuestionCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    questionNumber: number
    userId: number
    frameworkId: number
    seniorityId: number
    questions?: QuestionUncheckedCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInterviewNestedInput
    framework?: FrameworkUpdateOneRequiredWithoutInterviewNestedInput
    seniority?: SeniorityUpdateOneRequiredWithoutInterviewNestedInput
    questionNumber?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    frameworkId?: IntFieldUpdateOperationsInput | number
    seniorityId?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    frameworkId?: IntFieldUpdateOperationsInput | number
    seniorityId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    answer?: string | null
    correct?: boolean | null
    interviewerAnswer?: string | null
    interview: InterviewCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    answer?: string | null
    correct?: boolean | null
    interviewerAnswer?: string | null
    interviewId: number
  }

  export type QuestionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    interview?: InterviewUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    interviewId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    interviewId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    avatarImage?: string | null
    Interview?: InterviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    avatarImage?: string | null
    Interview?: InterviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarImage?: NullableStringFieldUpdateOperationsInput | string | null
    Interview?: InterviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarImage?: NullableStringFieldUpdateOperationsInput | string | null
    Interview?: InterviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarImage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarImage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrameworkCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    Interview?: InterviewCreateNestedManyWithoutFrameworkInput
  }

  export type FrameworkUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
    Interview?: InterviewUncheckedCreateNestedManyWithoutFrameworkInput
  }

  export type FrameworkUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Interview?: InterviewUpdateManyWithoutFrameworkNestedInput
  }

  export type FrameworkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    Interview?: InterviewUncheckedUpdateManyWithoutFrameworkNestedInput
  }

  export type FrameworkUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type FrameworkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type SeniorityCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    Interview?: InterviewCreateNestedManyWithoutSeniorityInput
  }

  export type SeniorityUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    Interview?: InterviewUncheckedCreateNestedManyWithoutSeniorityInput
  }

  export type SeniorityUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    Interview?: InterviewUpdateManyWithoutSeniorityNestedInput
  }

  export type SeniorityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    Interview?: InterviewUncheckedUpdateManyWithoutSeniorityNestedInput
  }

  export type SeniorityUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SeniorityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FrameworkRelationFilter = {
    is?: FrameworkWhereInput
    isNot?: FrameworkWhereInput
  }

  export type SeniorityRelationFilter = {
    is?: SeniorityWhereInput
    isNot?: SeniorityWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InterviewCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
    prompt?: SortOrder
    interviewerName?: SortOrder
    interviewerImage?: SortOrder
    finalAssesment?: SortOrder
  }

  export type InterviewAvgOrderByAggregateInput = {
    id?: SortOrder
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
  }

  export type InterviewMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
    prompt?: SortOrder
    interviewerName?: SortOrder
    interviewerImage?: SortOrder
    finalAssesment?: SortOrder
  }

  export type InterviewMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
    prompt?: SortOrder
    interviewerName?: SortOrder
    interviewerImage?: SortOrder
    finalAssesment?: SortOrder
  }

  export type InterviewSumOrderByAggregateInput = {
    id?: SortOrder
    questionNumber?: SortOrder
    userId?: SortOrder
    frameworkId?: SortOrder
    seniorityId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type InterviewRelationFilter = {
    is?: InterviewWhereInput
    isNot?: InterviewWhereInput
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    answer?: SortOrder
    correct?: SortOrder
    interviewerAnswer?: SortOrder
    interviewId?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    interviewId?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    answer?: SortOrder
    correct?: SortOrder
    interviewerAnswer?: SortOrder
    interviewId?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: SortOrder
    answer?: SortOrder
    correct?: SortOrder
    interviewerAnswer?: SortOrder
    interviewId?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
    interviewId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type InterviewListRelationFilter = {
    every?: InterviewWhereInput
    some?: InterviewWhereInput
    none?: InterviewWhereInput
  }

  export type InterviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatarImage?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatarImage?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    avatarImage?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FrameworkCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type FrameworkAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FrameworkMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type FrameworkMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type FrameworkSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SeniorityCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
  }

  export type SeniorityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SeniorityMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
  }

  export type SeniorityMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
  }

  export type SenioritySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCreateNestedOneWithoutInterviewInput = {
    create?: XOR<UserCreateWithoutInterviewInput, UserUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterviewInput
    connect?: UserWhereUniqueInput
  }

  export type FrameworkCreateNestedOneWithoutInterviewInput = {
    create?: XOR<FrameworkCreateWithoutInterviewInput, FrameworkUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: FrameworkCreateOrConnectWithoutInterviewInput
    connect?: FrameworkWhereUniqueInput
  }

  export type SeniorityCreateNestedOneWithoutInterviewInput = {
    create?: XOR<SeniorityCreateWithoutInterviewInput, SeniorityUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: SeniorityCreateOrConnectWithoutInterviewInput
    connect?: SeniorityWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutInterviewInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutInterviewInput>, Enumerable<QuestionUncheckedCreateWithoutInterviewInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutInterviewInput>
    connect?: Enumerable<QuestionWhereUniqueInput>
  }

  export type QuestionUncheckedCreateNestedManyWithoutInterviewInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutInterviewInput>, Enumerable<QuestionUncheckedCreateWithoutInterviewInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutInterviewInput>
    connect?: Enumerable<QuestionWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutInterviewNestedInput = {
    create?: XOR<UserCreateWithoutInterviewInput, UserUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: UserCreateOrConnectWithoutInterviewInput
    upsert?: UserUpsertWithoutInterviewInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutInterviewInput, UserUncheckedUpdateWithoutInterviewInput>
  }

  export type FrameworkUpdateOneRequiredWithoutInterviewNestedInput = {
    create?: XOR<FrameworkCreateWithoutInterviewInput, FrameworkUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: FrameworkCreateOrConnectWithoutInterviewInput
    upsert?: FrameworkUpsertWithoutInterviewInput
    connect?: FrameworkWhereUniqueInput
    update?: XOR<FrameworkUpdateWithoutInterviewInput, FrameworkUncheckedUpdateWithoutInterviewInput>
  }

  export type SeniorityUpdateOneRequiredWithoutInterviewNestedInput = {
    create?: XOR<SeniorityCreateWithoutInterviewInput, SeniorityUncheckedCreateWithoutInterviewInput>
    connectOrCreate?: SeniorityCreateOrConnectWithoutInterviewInput
    upsert?: SeniorityUpsertWithoutInterviewInput
    connect?: SeniorityWhereUniqueInput
    update?: XOR<SeniorityUpdateWithoutInterviewInput, SeniorityUncheckedUpdateWithoutInterviewInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QuestionUpdateManyWithoutInterviewNestedInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutInterviewInput>, Enumerable<QuestionUncheckedCreateWithoutInterviewInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutInterviewInput>
    upsert?: Enumerable<QuestionUpsertWithWhereUniqueWithoutInterviewInput>
    set?: Enumerable<QuestionWhereUniqueInput>
    disconnect?: Enumerable<QuestionWhereUniqueInput>
    delete?: Enumerable<QuestionWhereUniqueInput>
    connect?: Enumerable<QuestionWhereUniqueInput>
    update?: Enumerable<QuestionUpdateWithWhereUniqueWithoutInterviewInput>
    updateMany?: Enumerable<QuestionUpdateManyWithWhereWithoutInterviewInput>
    deleteMany?: Enumerable<QuestionScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type QuestionUncheckedUpdateManyWithoutInterviewNestedInput = {
    create?: XOR<Enumerable<QuestionCreateWithoutInterviewInput>, Enumerable<QuestionUncheckedCreateWithoutInterviewInput>>
    connectOrCreate?: Enumerable<QuestionCreateOrConnectWithoutInterviewInput>
    upsert?: Enumerable<QuestionUpsertWithWhereUniqueWithoutInterviewInput>
    set?: Enumerable<QuestionWhereUniqueInput>
    disconnect?: Enumerable<QuestionWhereUniqueInput>
    delete?: Enumerable<QuestionWhereUniqueInput>
    connect?: Enumerable<QuestionWhereUniqueInput>
    update?: Enumerable<QuestionUpdateWithWhereUniqueWithoutInterviewInput>
    updateMany?: Enumerable<QuestionUpdateManyWithWhereWithoutInterviewInput>
    deleteMany?: Enumerable<QuestionScalarWhereInput>
  }

  export type InterviewCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<InterviewCreateWithoutQuestionsInput, InterviewUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: InterviewCreateOrConnectWithoutQuestionsInput
    connect?: InterviewWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type InterviewUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<InterviewCreateWithoutQuestionsInput, InterviewUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: InterviewCreateOrConnectWithoutQuestionsInput
    upsert?: InterviewUpsertWithoutQuestionsInput
    connect?: InterviewWhereUniqueInput
    update?: XOR<InterviewUpdateWithoutQuestionsInput, InterviewUncheckedUpdateWithoutQuestionsInput>
  }

  export type InterviewCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutUserInput>, Enumerable<InterviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutUserInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
  }

  export type InterviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutUserInput>, Enumerable<InterviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutUserInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
  }

  export type InterviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutUserInput>, Enumerable<InterviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InterviewUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<InterviewWhereUniqueInput>
    disconnect?: Enumerable<InterviewWhereUniqueInput>
    delete?: Enumerable<InterviewWhereUniqueInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
    update?: Enumerable<InterviewUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InterviewUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InterviewScalarWhereInput>
  }

  export type InterviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutUserInput>, Enumerable<InterviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<InterviewUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<InterviewWhereUniqueInput>
    disconnect?: Enumerable<InterviewWhereUniqueInput>
    delete?: Enumerable<InterviewWhereUniqueInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
    update?: Enumerable<InterviewUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<InterviewUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<InterviewScalarWhereInput>
  }

  export type InterviewCreateNestedManyWithoutFrameworkInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutFrameworkInput>, Enumerable<InterviewUncheckedCreateWithoutFrameworkInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutFrameworkInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
  }

  export type InterviewUncheckedCreateNestedManyWithoutFrameworkInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutFrameworkInput>, Enumerable<InterviewUncheckedCreateWithoutFrameworkInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutFrameworkInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
  }

  export type InterviewUpdateManyWithoutFrameworkNestedInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutFrameworkInput>, Enumerable<InterviewUncheckedCreateWithoutFrameworkInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutFrameworkInput>
    upsert?: Enumerable<InterviewUpsertWithWhereUniqueWithoutFrameworkInput>
    set?: Enumerable<InterviewWhereUniqueInput>
    disconnect?: Enumerable<InterviewWhereUniqueInput>
    delete?: Enumerable<InterviewWhereUniqueInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
    update?: Enumerable<InterviewUpdateWithWhereUniqueWithoutFrameworkInput>
    updateMany?: Enumerable<InterviewUpdateManyWithWhereWithoutFrameworkInput>
    deleteMany?: Enumerable<InterviewScalarWhereInput>
  }

  export type InterviewUncheckedUpdateManyWithoutFrameworkNestedInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutFrameworkInput>, Enumerable<InterviewUncheckedCreateWithoutFrameworkInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutFrameworkInput>
    upsert?: Enumerable<InterviewUpsertWithWhereUniqueWithoutFrameworkInput>
    set?: Enumerable<InterviewWhereUniqueInput>
    disconnect?: Enumerable<InterviewWhereUniqueInput>
    delete?: Enumerable<InterviewWhereUniqueInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
    update?: Enumerable<InterviewUpdateWithWhereUniqueWithoutFrameworkInput>
    updateMany?: Enumerable<InterviewUpdateManyWithWhereWithoutFrameworkInput>
    deleteMany?: Enumerable<InterviewScalarWhereInput>
  }

  export type InterviewCreateNestedManyWithoutSeniorityInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutSeniorityInput>, Enumerable<InterviewUncheckedCreateWithoutSeniorityInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutSeniorityInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
  }

  export type InterviewUncheckedCreateNestedManyWithoutSeniorityInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutSeniorityInput>, Enumerable<InterviewUncheckedCreateWithoutSeniorityInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutSeniorityInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
  }

  export type InterviewUpdateManyWithoutSeniorityNestedInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutSeniorityInput>, Enumerable<InterviewUncheckedCreateWithoutSeniorityInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutSeniorityInput>
    upsert?: Enumerable<InterviewUpsertWithWhereUniqueWithoutSeniorityInput>
    set?: Enumerable<InterviewWhereUniqueInput>
    disconnect?: Enumerable<InterviewWhereUniqueInput>
    delete?: Enumerable<InterviewWhereUniqueInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
    update?: Enumerable<InterviewUpdateWithWhereUniqueWithoutSeniorityInput>
    updateMany?: Enumerable<InterviewUpdateManyWithWhereWithoutSeniorityInput>
    deleteMany?: Enumerable<InterviewScalarWhereInput>
  }

  export type InterviewUncheckedUpdateManyWithoutSeniorityNestedInput = {
    create?: XOR<Enumerable<InterviewCreateWithoutSeniorityInput>, Enumerable<InterviewUncheckedCreateWithoutSeniorityInput>>
    connectOrCreate?: Enumerable<InterviewCreateOrConnectWithoutSeniorityInput>
    upsert?: Enumerable<InterviewUpsertWithWhereUniqueWithoutSeniorityInput>
    set?: Enumerable<InterviewWhereUniqueInput>
    disconnect?: Enumerable<InterviewWhereUniqueInput>
    delete?: Enumerable<InterviewWhereUniqueInput>
    connect?: Enumerable<InterviewWhereUniqueInput>
    update?: Enumerable<InterviewUpdateWithWhereUniqueWithoutSeniorityInput>
    updateMany?: Enumerable<InterviewUpdateManyWithWhereWithoutSeniorityInput>
    deleteMany?: Enumerable<InterviewScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type UserCreateWithoutInterviewInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    avatarImage?: string | null
  }

  export type UserUncheckedCreateWithoutInterviewInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    password: string
    name: string
    avatarImage?: string | null
  }

  export type UserCreateOrConnectWithoutInterviewInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInterviewInput, UserUncheckedCreateWithoutInterviewInput>
  }

  export type FrameworkCreateWithoutInterviewInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
  }

  export type FrameworkUncheckedCreateWithoutInterviewInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    image: string
  }

  export type FrameworkCreateOrConnectWithoutInterviewInput = {
    where: FrameworkWhereUniqueInput
    create: XOR<FrameworkCreateWithoutInterviewInput, FrameworkUncheckedCreateWithoutInterviewInput>
  }

  export type SeniorityCreateWithoutInterviewInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
  }

  export type SeniorityUncheckedCreateWithoutInterviewInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
  }

  export type SeniorityCreateOrConnectWithoutInterviewInput = {
    where: SeniorityWhereUniqueInput
    create: XOR<SeniorityCreateWithoutInterviewInput, SeniorityUncheckedCreateWithoutInterviewInput>
  }

  export type QuestionCreateWithoutInterviewInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    answer?: string | null
    correct?: boolean | null
    interviewerAnswer?: string | null
  }

  export type QuestionUncheckedCreateWithoutInterviewInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content: string
    answer?: string | null
    correct?: boolean | null
    interviewerAnswer?: string | null
  }

  export type QuestionCreateOrConnectWithoutInterviewInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutInterviewInput, QuestionUncheckedCreateWithoutInterviewInput>
  }

  export type UserUpsertWithoutInterviewInput = {
    update: XOR<UserUpdateWithoutInterviewInput, UserUncheckedUpdateWithoutInterviewInput>
    create: XOR<UserCreateWithoutInterviewInput, UserUncheckedCreateWithoutInterviewInput>
  }

  export type UserUpdateWithoutInterviewInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarImage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    avatarImage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrameworkUpsertWithoutInterviewInput = {
    update: XOR<FrameworkUpdateWithoutInterviewInput, FrameworkUncheckedUpdateWithoutInterviewInput>
    create: XOR<FrameworkCreateWithoutInterviewInput, FrameworkUncheckedCreateWithoutInterviewInput>
  }

  export type FrameworkUpdateWithoutInterviewInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type FrameworkUncheckedUpdateWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type SeniorityUpsertWithoutInterviewInput = {
    update: XOR<SeniorityUpdateWithoutInterviewInput, SeniorityUncheckedUpdateWithoutInterviewInput>
    create: XOR<SeniorityCreateWithoutInterviewInput, SeniorityUncheckedCreateWithoutInterviewInput>
  }

  export type SeniorityUpdateWithoutInterviewInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SeniorityUncheckedUpdateWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutInterviewInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutInterviewInput, QuestionUncheckedUpdateWithoutInterviewInput>
    create: XOR<QuestionCreateWithoutInterviewInput, QuestionUncheckedCreateWithoutInterviewInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutInterviewInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutInterviewInput, QuestionUncheckedUpdateWithoutInterviewInput>
  }

  export type QuestionUpdateManyWithWhereWithoutInterviewInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: Enumerable<QuestionScalarWhereInput>
    OR?: Enumerable<QuestionScalarWhereInput>
    NOT?: Enumerable<QuestionScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    content?: StringFilter | string
    answer?: StringNullableFilter | string | null
    correct?: BoolNullableFilter | boolean | null
    interviewerAnswer?: StringNullableFilter | string | null
    interviewId?: IntFilter | number
  }

  export type InterviewCreateWithoutQuestionsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    user: UserCreateNestedOneWithoutInterviewInput
    framework: FrameworkCreateNestedOneWithoutInterviewInput
    seniority: SeniorityCreateNestedOneWithoutInterviewInput
    questionNumber: number
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewUncheckedCreateWithoutQuestionsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    questionNumber: number
    userId: number
    frameworkId: number
    seniorityId: number
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewCreateOrConnectWithoutQuestionsInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutQuestionsInput, InterviewUncheckedCreateWithoutQuestionsInput>
  }

  export type InterviewUpsertWithoutQuestionsInput = {
    update: XOR<InterviewUpdateWithoutQuestionsInput, InterviewUncheckedUpdateWithoutQuestionsInput>
    create: XOR<InterviewCreateWithoutQuestionsInput, InterviewUncheckedCreateWithoutQuestionsInput>
  }

  export type InterviewUpdateWithoutQuestionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInterviewNestedInput
    framework?: FrameworkUpdateOneRequiredWithoutInterviewNestedInput
    seniority?: SeniorityUpdateOneRequiredWithoutInterviewNestedInput
    questionNumber?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    frameworkId?: IntFieldUpdateOperationsInput | number
    seniorityId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    framework: FrameworkCreateNestedOneWithoutInterviewInput
    seniority: SeniorityCreateNestedOneWithoutInterviewInput
    questionNumber: number
    questions?: QuestionCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    questionNumber: number
    frameworkId: number
    seniorityId: number
    questions?: QuestionUncheckedCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewCreateOrConnectWithoutUserInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutUserInput, InterviewUncheckedCreateWithoutUserInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutUserInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutUserInput, InterviewUncheckedUpdateWithoutUserInput>
    create: XOR<InterviewCreateWithoutUserInput, InterviewUncheckedCreateWithoutUserInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutUserInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutUserInput, InterviewUncheckedUpdateWithoutUserInput>
  }

  export type InterviewUpdateManyWithWhereWithoutUserInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutInterviewInput>
  }

  export type InterviewScalarWhereInput = {
    AND?: Enumerable<InterviewScalarWhereInput>
    OR?: Enumerable<InterviewScalarWhereInput>
    NOT?: Enumerable<InterviewScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    title?: StringFilter | string
    questionNumber?: IntFilter | number
    userId?: IntFilter | number
    frameworkId?: IntFilter | number
    seniorityId?: IntFilter | number
    prompt?: StringFilter | string
    interviewerName?: StringFilter | string
    interviewerImage?: StringFilter | string
    finalAssesment?: StringNullableFilter | string | null
  }

  export type InterviewCreateWithoutFrameworkInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    user: UserCreateNestedOneWithoutInterviewInput
    seniority: SeniorityCreateNestedOneWithoutInterviewInput
    questionNumber: number
    questions?: QuestionCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewUncheckedCreateWithoutFrameworkInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    questionNumber: number
    userId: number
    seniorityId: number
    questions?: QuestionUncheckedCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewCreateOrConnectWithoutFrameworkInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutFrameworkInput, InterviewUncheckedCreateWithoutFrameworkInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutFrameworkInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutFrameworkInput, InterviewUncheckedUpdateWithoutFrameworkInput>
    create: XOR<InterviewCreateWithoutFrameworkInput, InterviewUncheckedCreateWithoutFrameworkInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutFrameworkInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutFrameworkInput, InterviewUncheckedUpdateWithoutFrameworkInput>
  }

  export type InterviewUpdateManyWithWhereWithoutFrameworkInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutInterviewInput>
  }

  export type InterviewCreateWithoutSeniorityInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    user: UserCreateNestedOneWithoutInterviewInput
    framework: FrameworkCreateNestedOneWithoutInterviewInput
    questionNumber: number
    questions?: QuestionCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewUncheckedCreateWithoutSeniorityInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    title: string
    questionNumber: number
    userId: number
    frameworkId: number
    questions?: QuestionUncheckedCreateNestedManyWithoutInterviewInput
    prompt: string
    interviewerName: string
    interviewerImage: string
    finalAssesment?: string | null
  }

  export type InterviewCreateOrConnectWithoutSeniorityInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutSeniorityInput, InterviewUncheckedCreateWithoutSeniorityInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutSeniorityInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutSeniorityInput, InterviewUncheckedUpdateWithoutSeniorityInput>
    create: XOR<InterviewCreateWithoutSeniorityInput, InterviewUncheckedCreateWithoutSeniorityInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutSeniorityInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutSeniorityInput, InterviewUncheckedUpdateWithoutSeniorityInput>
  }

  export type InterviewUpdateManyWithWhereWithoutSeniorityInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutInterviewInput>
  }

  export type QuestionUpdateWithoutInterviewInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionUncheckedUpdateWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    correct?: NullableBoolFieldUpdateOperationsInput | boolean | null
    interviewerAnswer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    framework?: FrameworkUpdateOneRequiredWithoutInterviewNestedInput
    seniority?: SeniorityUpdateOneRequiredWithoutInterviewNestedInput
    questionNumber?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    frameworkId?: IntFieldUpdateOperationsInput | number
    seniorityId?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateManyWithoutInterviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    frameworkId?: IntFieldUpdateOperationsInput | number
    seniorityId?: IntFieldUpdateOperationsInput | number
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUpdateWithoutFrameworkInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInterviewNestedInput
    seniority?: SeniorityUpdateOneRequiredWithoutInterviewNestedInput
    questionNumber?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateWithoutFrameworkInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    seniorityId?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUpdateWithoutSeniorityInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutInterviewNestedInput
    framework?: FrameworkUpdateOneRequiredWithoutInterviewNestedInput
    questionNumber?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InterviewUncheckedUpdateWithoutSeniorityInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    questionNumber?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    frameworkId?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutInterviewNestedInput
    prompt?: StringFieldUpdateOperationsInput | string
    interviewerName?: StringFieldUpdateOperationsInput | string
    interviewerImage?: StringFieldUpdateOperationsInput | string
    finalAssesment?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}